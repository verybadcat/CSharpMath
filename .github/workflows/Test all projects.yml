name: Test

on: [push, pull_request]
jobs:
  Core:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.201'
    - name: Setup JDK # Needed to run ANTLR for AngouriMath
      uses: actions/setup-java@v1
      with:
        java-version: '8'
    - name: Update dependencies in CSharpMath.Xaml.Tests.NuGet
      run: |
        dotnet tool install -g dotnet-outdated
        update() {
          dotnet outdated -u CSharpMath.Xaml.Tests.NuGet
          dotnet outdated -pre Always -inc CSharpMath -u CSharpMath.Xaml.Tests.NuGet
        }
        # retry 5 times since dotnet outdated fails often: https://github.com/jerriep/dotnet-outdated/issues/299
        update || update || update || update || update
    - name: Build and Test
      # run: dotnet test CSharpMath.CrossPlatform.slnf
      run: | # https://github.com/dotnet/sdk/issues/10409, https://github.com/dotnet/sdk/issues/11417
        for p in\
          "CSharpMath.CoreTests"\
          "CSharpMath.Editor.Tests"\
          "CSharpMath.Editor.Tests.FSharp"\
          "CSharpMath.Evaluation.Tests"\
          "CSharpMath.Rendering.Tests"\
          "CSharpMath.Rendering.Text.Tests"\
          "CSharpMath.Xaml.Tests"\
          "CSharpMath.Xaml.Tests.NuGet"\
          "AngouriMath/Tests/UnitTests"\
          "Typography/Typography.TextBreak/Typography.TextBreak.UnitTests"
        do
          dotnet add "$p" package Microsoft.NET.Test.Sdk # Update is required for GitHubActionsTestLogger to print anything
          dotnet add "$p" package GitHubActionsTestLogger
          dotnet test "$p" -c Release -l GitHubActions
        done
    - uses: actions/upload-artifact@v2
      if: always() # Run even when a previous step failed: https://stackoverflow.com/a/58859404/5429648
      with:
        name: CSharpMath.Rendering.Tests results
        path: CSharpMath.Rendering.Tests/*/*.png
  Ios:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - run: nuget restore CSharpMath.sln
    - run: msbuild CSharpMath.Ios.Tests
    - name: Run tests
      env:
        IOS_SIM_NAME: iPhone 11 # https://github.com/actions/virtual-environments/blob/master/images/macos/macos-10.15-Readme.md#installed-simulators
        BUNDLE_IDENTIFIER: CSharpMath.Ios.Unit-Tests # Located inside CSharpMath.Ios.Tests Info.plist file
        APP_PATH: CSharpMath.Ios.Tests/bin/iPhoneSimulator/Debug/CSharpMath.Ios.Tests.app
      run: |
        # This script is a heavily modified version of https://gist.github.com/jerrymarino/1f9eb6a06c423f9744ea297d80193a9b
        
        IOS_SIM_UDID=`xcrun simctl list | grep -w "$IOS_SIM_NAME" | awk 'match($0, /\(([-0-9A-F]+)\)/) { print substr( $0, RSTART + 1, RLENGTH - 2 )}' | head -1`
        SIMULATOR_PATH='/Applications/Xcode.app/Contents/Developer/Applications/Simulator.app/Contents/MacOS/Simulator'
        
        # run_ios_sim builds and runs an iOS app on the simulator
        #
        # It is designed to replicate the behavior of "Run" in Xcode and assumes basic
        # xcodebuild usage.
        # 
        # USAGE:
        # export IOS_SIM_UDID=342F9A20-DF48-41A9-BE60-C6B35F47E97F; \
        # export BUNDLE_IDENTIFIER=a.Some; \
        # export APP_PATH=$PWD/Build/Debug-iphonesimulator/$APP_NAME.app \
        # /path/to/run_ios_sim.sh 
        #
        # Note that the UDID must match a device where runtime is installed See
        # available devices with "simctl list"
        #
        # Tested on Xcode 8.3.1 a few times
        # Author: Jerry Marino - @jerrymarino

        APP_NAME=`echo ""${APP_PATH##*/}"" | cut -d'.' -f1`

        echo "Running sim for $APP_NAME - $BUNDLE_IDENTIFIER"
        
        # If the booted simulator does not match, then we need to restart it. Expect an
        # output list of the form
        # "Phone: iPhone 7 Plus (342F9A20-DF48-41A9-BE60-C6B35F47E97F) (Booted)"
        BOOTED_UDID=`xcrun simctl list | grep Booted | perl -pe 's/(.*\()(.*)\)+ (.*)/\2/' | sed -n 1p`
        if [[ $BOOTED_UDID != $IOS_SIM_UDID ]]; then
          killall Simulator || true # Ignore error code 1: No matching process has been found
        else
          # FIXME: We don't need to do this for all cases and
          # it is slow
          killall Simulator || true # Ignore error code 1: No matching process has been found
        fi

        # Open the simulator
        open -a "$SIMULATOR_PATH" --args -CurrentDeviceUDID $IOS_SIM_UDID

        # Wait until there is a device booted

        function booted_sim_ct() {
          echo `xcrun simctl list | grep Booted | wc -l | sed -e 's/ //g'`
        }

        while [ `booted_sim_ct` -lt 1 ]
        do
          sleep 1
        done

        echo "Installing app at path $APP_PATH"
        xcrun simctl install booted $APP_PATH

        # Launch the app program into the booted sim
        TESTS_OUTPUT=`xcrun simctl launch --console booted "$BUNDLE_IDENTIFIER" 2>&1`
        # 2>&1 means "redirect stderr to stdout": https://stackoverflow.com/a/818284/5429648

        echo "$TESTS_OUTPUT"
        
        # Move artifacts (generated pictures) to a known path for uploading
        TESTS_ARTIFACTS="`xcrun simctl get_app_container booted $BUNDLE_IDENTIFIER data`/Documents/*"
        mkdir -p /tmp/tests_artifacts
        mv "$TESTS_ARTIFACTS" /tmp/tests_artifacts

        if [[ "$TESTS_OUTPUT" == *"[FAIL]"* ]]
        then exit 1 # Fail this workflow
        fi
    - uses: actions/upload-artifact@v2
      if: always() # Run even when a previous step failed: https://stackoverflow.com/a/58859404/5429648
      with:
        name: CSharpMath.Ios.Tests Results
        path: /tmp/tests_artifacts
